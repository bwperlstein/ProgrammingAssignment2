readB = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA
readB
readdf
h5write(c(12;14), "example.h5", "foo/A", index = c(1:3), 1))
h5write(c(12:14), "example.h5", "foo/A", index = c(1:3), 1))
h5write(c(12:14), "example.h5", "foo/A", index = list(c(1:3), 1)))
h5write(c(12:14), "example.h5", "foo/A", index = list(c(1:3), 1))
h5read("example.h5", "foo/A")
con = "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
htmlcode = readLines(con)
close(con)
?close
class(con)
?setClass
con <- setClass("connection")
class(con)
con
con = "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
class(con)
open(con)
?readLines
con2 <- file(con, "rt")
class(con2)
htmlcode = readLines(con2)
close(con2)
htmlcode
library(XML)
url <- con
class(url)
url
library(XML)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply()
xpathSApply(html, "//title", xmlValue)
html
title = xpathSApply(html, "//title", xmlValue)
title
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//title", xmlValue)
html
?htmlTreeParse
html <- htmlParse(url, useInternalNodes = T)
html
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
class(con)
htmlcode = readLines(con)
close(con)
htmlcode
install.packages("httr")
library(httr)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- xmlTreeParse(GET(url)$content, useInternalNodes = TRUE)
html <- xmlTreeParse(rawToChar(GET(url)$content), useInternalNodes = TRUE)
html <- htmlTreeParse(rawToChar(GET(url)$content), useInternalNodes = TRUE)
html <- htmlTreeParse(rawToChar(GET(url)$content), useInternalNodes = TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@class='gsc_a_c']", xmlValue)
html2 = GET(url)
html2
content2 = content(html2, as = "text")
content2
parsedHTML = htmlParse(content2, asText = TRUE)
parsedHTML
xpathSApply(parsedHTML, "//title", xmlValue)
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
google = handle("http://google.com")
google
pg1 = GET(handle = google, path = "/")
pg1
pg2 = GET(handle = google, path = "search")
pg2
library(httr)
library(plyr)
library(dplyr)
df3
df1 <- data.frame(id = sample(1:10), rnorm(10))
df1 <- data.frame(id = sample(1:10), x = rnorm(10))
df2 <- data.frame(id = sample(1:10), y = rnorm(10))
df3 <- data.frame(id = sample(1:10), z = rnorm(10))
dflist <- list(df1, df2, df3)
join_a;
join_all(dflist)
swirl()
library(swirl)
rm(list = ls())
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
library(swirl)
swirl()
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -(5:20)
)
select(cran, -(5:20))
select(cran, -5:20)
info()
skip()
-(5:20)
select(cran, -(x:size))
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, package == "swirl", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 = select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
?n# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
setwd("./R/CleanData")
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(pack_sum, desc)
top_unique_sorted <- arrange(pack_sum, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unqiue_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count, -grade)
res
>separate()
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
?gather
submit()
submit()
?spread
submit()
submit()
info()
skip()
library(readr)
parse_number("class5")
submit()
?mutate
play()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(parse_number("class1") = "class1") %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(c("class1", "class2", "class3", "class4", "class5"))) %>%
print
skip()
students4
submit()
?unique
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(list(passed, failed))
bind_rows(passed, failed)
sat
submit()
submit()
sat
play()
?separate
submit()
submit()
nxt()
submit()
skip()
play()
?group_by
?mutate
skip()
library(plyr)
library(dplyr)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
setwd("./R/DataClean")
dest = "ACS-new.csv"
download.file(fileURL, dest)
df <- read.csv(dest, header = TRUE)
df
str(df)
dt <- tbl_df(df)
dt
head(dt)
agriculturalLogical <- dt[, dt$HINCP] > 10000 & dt[, dt$ACR] = 3
dt[, dt$HINCP] > 10000
agriculturalLogical <- dt$HINCP > 10000 & dt$ACR = 3
agriculturalLogical <- dt$HINCP > 10000 && dt$ACR = 3
dt$HINCP > 10000 && dt$ACR = 3
dt$HINCP > 10000 & dt$ACR = 3
dt_temp <- filter(dt, HINCP > 10000, ACR == 3)
dt_temp
filter(dt, HINCP > 10000, ACR == 3)
dt_temp <- filter(dt, HINCP, ACR)
dt_temp
?select
dt_temp <- select(dt, HINCP, ACR)
dt_temp
agricuturalLogical <- dt_temp$HINCP > 10000 & dt_temp$ACR == 3
agriculturalLogical <- dt_temp$HINCP > 10000 & dt_temp$ACR == 3
agriculturalLogical
agriculturalLogical <- dt_temp$HINCP > 10000 & !is.na(dt_temp$HINCP) & dt_temp$ACR == 3 & !is.na(dt_temp$ACR)
agriculturalLogical
which(agriculturalLogical)
dt_temp[25, ]
dt_temp2 <- select(dt, FINCP, ACR)
agriculturalLogical2 <- dt_temp2$FINCP > 10000 & !is.na(dt_temp2$FINCP) & dt_temp2$ACR == 3 & !is.na(dt_temp2$ACR)
agriculturalLogical2
which(dt_temp$HINCP > 10000 & !is.na(dt_temp$HINCP) & dt_temp$ACR == 3 & !is.na(dt_temp$ACR))
agriculturalLogical <- dt$ACR == 3 & !is.na(dt$ACR) & dt$AGS == 6 & is.na(dt$AGS)
which(agriculturalLogical)
agriculturalLogical <- dt$ACR == 3 & dt$AGS == 6
which(agriculturalLogical)
rm(list = ls())
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
dest = "picture.jpeg"
?download.file
download.file(fileURL, dest, method = "wininet", mode = "wb")
?readBin
df <- readBin(dest, "logical")
df
df <- readBin(dest, "integer")
df
df <- readBin(dest, "raw")
df
dest <- tempfile()
download.file(fileURL, dest, method = "wininet", mode = "wb")
pic <- readJPEG(dest, native = TRUE)
install.packages("jpeg")
library(jpeg)
?readJPEG
pic <- readJPEG(dest, native = TRUE)
file.remove(dest)
pic
dim(pci)
dim(pic)
?quantile
quantile(pic, probs = seq(0.3, 0.8))
quantile(pic, probs = seq(0.3, 0.8), na.rm = TRUE, names = FALSE)
quantile(pic, probs = seq(0.1, 0.3, 0.8, 0.9), na.rm = TRUE, names = FALSE)
quantile(pic, probs = seq(0.3), na.rm = TRUE, names = FALSE)
quantile(pic, probs = seq(3), na.rm = TRUE, names = FALSE)
quantile(pic, probs = seq(0.3, 0.8), na.rm = TRUE, names = FALSE)
quantile(pic, probs = seq(0.8), na.rm = TRUE, names = FALSE)
quantile(pic, probs = seq(0.8, 0.3), na.rm = TRUE, names = FALSE)
rm(list = ls())
fileURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
dest1 <- "FGDP.csv"
dest2 <- "FEDSTATS.csv"
download.file(fileURL1, dest1)
download.file(fileURL2, dest2)
fgdp <- read.csv(dest1)
fedstats <- read.csv(dest2)
fgdp
head(fgdp)
head(fedstats)
fgdp <- read.csv(dest1, header = TRUE)
head(fgdp)
?download.file
str(fgdp)
?merge
?filter
fgdp_clean <- filter(fgdp, X != "" & !is.na(X))
fgdp_clean
head(fedstats)
?merge
gdpMerge <- merge(fgdp_clean, fedstats, by.x = X, by.y = CountryCode)
gdpMerge <- merge(fgdp_clean, fedstats, by.x = "X", by.y = "CountryCode")
gdpMerge
with(is.na(gdpMerge$CountryCode))
colnames(gdpMerge)
colnames(fgdp_clean)
colnames(fedstats)
nrow(gdpMerge)
?unique
gdpMerge <- unique(gdpMerge)
nrow(gdpMerge)
head(gdpMerge)
head(gdpMerge, 20)
class(gdpMerge$Gross.domestic.product.2012)
?mutate
mutate(gdpMerge, rank = as.integer(Gross.domestic.product.2012))
arrange(gdpMerge, desc(rank))
class(gdpMerge$rank)
colnames(gdpMerge)
gdpMerge <- mutate(gdpMerge, rank = as.integer(Gross.domestic.product.2012))
colnames(gdpMerge)
class(gdpMerge$rank)
arrange(gdpMerge, desc(rank))
tail(gdpMerge, 5)
head(gdpMerge, 5)
gdpMerge <- arrange(gdpMerge, desc(rank))
head(gdpMerge, 13)
tail(gdpMerge, 13)
gdpMerge <- arrange(gdpMerge, Gross.domestic.product.2012, na.rm = TRUE)
gdpMerge <- arrange(gdpMerge, Gross.domestic.product.2012)
gdpMerge <- arrange(gdpMerge, desc(Gross.domestic.product.2012))
head(gdpMerge, 13)
gdpMerge <- select(gdpMerge, -rank)
head(gdpMerge, 13)
gdpMerge <- mutate(gdpMerge, rank = as.integer(Gross.domestic.product.2012))
head(gdpMerge, 13)
gdpMerge <- mutate(gdpMerge, rank = Gross.domestic.product.2012)
head(gdpMerge, 13)
gdpMerge <- mutate(gdpMerge, rank = as.numeric(Gross.domestic.product.2012))
head(gdpMerge, 13)
gdpMerge <- mutate(gdpMerge, rank = as.character(Gross.domestic.product.2012))
head(gdpMerge, 13)
gdpMerge <- mutate(gdpMerge, rank = as.integer(as.character(Gross.domestic.product.2012)))
head(gdpMerge, 13)
class(gdpMerge$rank)
gdpMerge <- arrange(gdpMerge, desc(rank))
head(gdpMerge, 13)
filter(gdpMerge, rank == 0 | is.na(rank))
gdpMerge <- filter(gdpMerge, !is.na(rank))
nrow(gdpMerge)
head(gdpMerge)
head(gdpMerge, 13)
colnames(gdpMerge)
rowptr <- "OECD" %in% gdpMerge[1:189, 1:41]
rowptr
tail(gdpMerge, 20)
gdpMerge <- group_by(gdpMerge, Income.Group)
?group_by
gdpMerge <- mutate(gdpMerge, grp = Income.Group == "High income: OECD")
gdpMerge <- ungroup(gdpMerge)
tail(gdpMerge, 10)
gdpMerge <- group_by(gdpMerge, grp)
tail(gdpMerge, 10)
class(gdpMerge)
gdpMerge <- data.frame(gdpMerge)
tail(gdpMerge, 10)
?summarize
gdpMerge %>%
group_by(grp) %>%
summarize(grpmean = mean(X.3))
ptr <- is.na(gdpMerge$X.3)
ptr
gdpMerge %>%
group_by(grp) %>%
summarize(grpmean = mean("X.3"))
class(gdpMerge$X.3)
gdpMerge <- mutate(gdpMerge, gdp = as.integer(as.character(X.3)))
tail(gdpMerge, 10)
gdpMerge <- mutate(gdpMerge, gdp = as.character(X.3))
tail(gdpMerge, 10)
class(gdpMerge$X.3)
class(gdpMerge$gdp)
gdpMerge <- mutate(gdpMerge, gdp = as.numeric(as.character(X.3)))
tail(gdpMerge, 10)
df1$COL1 <- as.numeric(gsub('[$,]', '', df1$COL1))
gdpMerge <- mutate(gdpMerge, gdp = as.numeric(gsub'[$,], '', as.character(X.3)))
gdpMerge <- mutate(gdpMerge, gdp = as.numeric(gsub'[$,]', '', as.character(X.3)))
gdpMerge <- mutate(gdpMerge, gdp2 = as.numeric(gsub'[$,]', '', gdp))
gdpMerge <- mutate(gdpMerge, gdp2 = as.numeric(gsub('[$,]', '', gdp)))
tail(gspMer)
tail(gdpMerge)
gdpMerge <- mutate(gdpMerge, gdp = as.numeric(gsub('[$,]', '', as.numeric(X.3))))
tail(gdpMerge)
library(readr)
gdpMerge <- mutate(gdpMerge, gdp = parse_integer(X.3))
gdpMerge <- mutate(gdpMerge, gdp = parse_integer(as.character(X.3)))
tail(gdpMerge)
gdpMerge <- mutate(gdpMerge, gdp = parse_number(as.character(X.3)))
tail(gdpMerge)
gdpMerge <- select(gdpMerge, -gdp2)
gdpMerge %>%
group_by(grp) %>%
summarize(gdpMean = mean(gdp))
gdpMerge %>%
group_by(grp) %>%
summarize(avgrank = median(rank))
ptr <- is.na(gdpMerge$rank)
ptr
ptr <- gdpMerge$rank == 0
ptr
?unique
gdpMerge %>%
group_by(grp, Income.group) %>
colnames(gdpMerge)
gdpMerge %>%
group_by(grp, Income.Group) %>
group_by(grp, Income.Group) %>%
gdpMerge %>%
group_by(grp, Income.Group) %>%
summarize(avgrank = mean(rank))
gdpMerge %>%
group_by(grp) %>%
summarize(avgrank = mean(rank))
result <- filter(gdpMerge, Income.Group = "Lower middle income", rank <= 38)
result <- filter(gdpMerge, Income.Group == "Lower middle income", rank <= 38)
result
